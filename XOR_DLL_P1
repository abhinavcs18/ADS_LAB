#include <stdio.h> 
#include <stdlib.h> 
#include <inttypes.h> 
  
struct Node 
{ 
    int data; 
    struct Node* x; 
}; 
  
struct Node* XOR (struct Node *a, struct Node *b) 
{ 
    return (struct Node*) ((uintptr_t) (a) ^ (uintptr_t) (b)); 
} 
  
void insert_beg(struct Node **head_ref, int data) 
{ 
 
    struct Node *new_node = (struct Node *) malloc (sizeof (struct Node) ); 
    new_node->data = data; 
  
 
    new_node->x = *head_ref; 
  
    if (*head_ref != NULL) 
    { 
        (*head_ref)->x = XOR(new_node, (*head_ref)->x); 
    } 
    *head_ref = new_node; 
} 
  
 
void printList (struct Node *head) 
{ 
    struct Node *curr = head; 
    struct Node *prev = NULL; 
    struct Node *next; 
  
    printf ("Following are the nodes of Linked List: \n"); 
  
    while (curr != NULL) 
    { 
        
        printf ("%d ", curr->data); 
  
        
        next = XOR (prev, curr->x); 
  
     
        prev = curr; 
        curr = next; 
    } 
} 
void insert_end(struct Node **head_ref, int data)
{
   struct Node * new_node = (struct Node *)malloc(sizeof(struct Node));
    new_node->data = data; 
   struct Node *curr = NULL;
    struct Node *prev = NULL;
    struct Node *next = *head_ref; 
    while(next!=NULL) 
    { 
        prev = curr; 
        curr = next;
        next = XOR(prev,curr->x);
    } 
        new_node->x = XOR(curr,NULL); 
        curr->x = XOR(prev,new_node);

}

int main () 
{ 
    struct Node *head = NULL; 
    int n,val;
    do
    {
   printf("Enter\n1:Insert_at_beg\n2:Insert_at_End\n3:Display\n0:Exit\n");
   
   scanf("%d",&n);
   switch(n)
   {
       case 1: printf("Enter val\n");
               scanf("%d",&val);
               insert_beg(&head,val);
               break;
       
       case 2: printf("Enter val\n");
               scanf("%d",&val);
               insert_end(&head,val);
                break;
       case 3: printList(head);
                break;
   }
    }while(n!=0);
  
  
    return (0); 
} 